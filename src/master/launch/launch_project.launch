<?xml version="1.0"?>
<launch>

    <param name="use_sim_time" type="bool" value="True"/>

    <arg name="verbosity"   default="SILENT" /> <!-- ALL, DEBUG, INFO, WARNING, ERROR, SILENT -->
    <arg name="config"      default="euroc_mav" /> <!-- euroc_mav, tum_vi, rpng_aruco -->
    <arg name="config_path" default="$(find ov_msckf)/../config/$(arg config)/estimator_config.yaml" />

    <arg name="dotime"      default="false" />
    <arg name="path_time"   default="/tmp/traj_timing.txt" />
    <!-- arg for depth_estimation-->
    <arg name="model_type" default="small" />
    <arg name="weights_folder" default="/workspace/catkin_ws_ov/src/depth_est/checkpoints/" />
    <arg name="use_cuda" default="true" />

    <!-- args for rosbag playback-->
    <arg name="bag_path" default="/workspace/datasets/euroc_mav/V1_01_easy.bag" />

    <node pkg="rosbag_play" type="bag_playback.py" name="bag_playback_node" output="screen">
        <param name="bag_path" value="$(arg bag_path)" />
    </node>

    <node name="ov_msckf" pkg="ov_msckf" type="run_subscribe_msckf" output="screen" clear_params="true">       
            <param name="verbosity"              type="string" value="$(arg verbosity)" />
            <param name="config_path"            type="string" value="$(arg config_path)" />

            <param name="use_stereo"             type="bool"   value="false" />
            <param name="max_cameras"            type="int"    value="1" />

            <param name="record_timing_information"   type="bool"   value="$(arg dotime)" />
            <param name="record_timing_filepath"      type="string" value="$(arg path_time)" />

            <param name="publish_tf" value="true"/>
    </node>


    <node pkg="imu_filter_madgwick" type="imu_filter_node" name="imu_filter" output="screen">
        <!-- Input: IMU raw -->
        <remap from="imu/data_raw" to="/imu_raw"/>  <!-- Topic IMU raw từ sensor của bạn -->
        <!-- Output: Filtered IMU với orientation -->
        <remap from="imu/data" to="/imu"/>  <!-- Feed trực tiếp vào RTAB-Map -->

        <!-- Parameters chính -->
        <param name="use_mag" value="false"/>  <!-- Tắt nếu không có magnetometer (thường true cho IMU cơ bản) -->
        <param name="world_frame" value="enu"/>  <!-- Hoặc 'ned' tùy theo convention (enu: East-North-Up, phù hợp với ROS REP-103) -->
        <param name="gain" value="0.1"/>  <!-- Gain filter: 0.1 là default, tăng nếu cần nhanh hơn nhưng noisy -->
        <param name="zeta" value="0.0"/>  <!-- Gyro drift gain, giữ 0 nếu không calibrate -->
        <param name="publish_tf" value="false"/>  <!-- Không cần publish TF ở đây, để RTAB-Map xử lý -->
        <param name="constant_dt" value="0.0"/>  <!-- Compute dt động từ timestamp -->
        <param name="remove_gravity_vector" value="true"/>  <!-- Bỏ gravity từ acceleration để clean data (khuyến nghị cho VIO) -->
        <param name="stateless" value="false"/>  <!-- Giữ stateful để tích hợp lịch sử -->
    </node>


    <node name="camera_info_publisher" pkg="master" type="camera_info.py" output="screen"/>

    <node name="depth_estimation" pkg="depth_est" type="depth_estimation.py" output="screen">
        <param name="model" value="$(arg model_type)"/>
        <param name="weights_folder" value="$(arg weights_folder)"/>
        <param name="use_cuda" value="$(arg use_cuda"/>
    </node>
    
      <group ns="rtabmap">
    <!-- SLAM (robot side) -->
    <!-- args: "delete_db_on_start" and "udebug" -->
    <node name="rtabmap" pkg="rtabmap_slam" type="rtabmap" output="screen">
        <param name="frame_id"           type="string" value="image"/>
        <param name="wait_for_transform" type="bool" value="true"/>

        <param name="subscribe_depth" type="bool" value="true"/>
        <param name="subscribe_scan"  type="bool" value="false"/>

        <!-- As /az3/base_controller/odom topic doesn't provide covariances, we use TF to get odom and we fix the covariance -->
        <param name="odom_frame_id"            type="string" value="global"/>
        <param name="odom_tf_linear_variance"  type="double" value="0.001"/>
        <param name="odom_tf_angular_variance" type="double" value="0.001"/>
        <param name="subscribe_odom" value="true"/>
        <param name="publish_tf" value="true"/>
        <remap from="odom" to="/ov_msckf/odomimu"/>
        <!-- <remap from="scan" to="/ov_msckf/points_msckf"/> -->

        <remap from="rgb/image"       to="/camera/image_raw"/>
        <remap from="depth/image"     to="/camera/depth_image"/>
        <remap from="rgb/camera_info" to="/camera/camera_info"/>

        <!-- RTAB-Map's parameters: do "rosrun rtabmap rtabmap (double-dash)params" to see the list of available parameters. -->
        <param name="RGBD/NeighborLinkRefining" type="string" value="true"/>  <!-- Do odometry correction with consecutive laser scans -->
        <param name="RGBD/ProximityBySpace"     type="string" value="true"/>  <!-- Local loop closure detection (using estimated position) with locations in WM -->
        <param name="RGBD/ProximityByTime"      type="string" value="false"/> <!-- Local loop closure detection with locations in STM -->
        <param name="RGBD/ProximityPathMaxNeighbors" type="string" value="10"/> <!-- Do also proximity detection by space by merging close scans together. -->
        <param name="Reg/Strategy"              type="string" value="2"/>     <!-- 0=Visual, 1=ICP, 2=Visual+ICP -->
        <param name="Vis/MinInliers"        type="string" value="12"/>   <!-- 3D visual words correspondence distance -->
        <param name="RGBD/OptimizeFromGraphEnd" type="string" value="false"/> <!-- Optimize graph from initial node so /map -> /odom transform will be generated -->
        <param name="RGBD/OptimizeMaxError"     type="string" value="4"/>	    <!-- Reject any loop closure causing large errors (>3x link's covariance) in the map -->
        <param name="Reg/Force3DoF"             type="string" value="true"/>  <!-- 2D SLAM -->
        <!-- Create 2D occupancy grid from laser scan -->
        <param name="Mem/STMSize"               type="string" value="30"/>    <!-- increased to 30 to avoid adding too many loop closures on just seen locations -->
        <param name="RGBD/LocalRadius"          type="string" value="1"/>     <!-- limit length of proximity detections -->
        <param name="Icp/CorrespondenceRatio"   type="string" value="0.2"/>   <!-- minimum scan overlap to accept loop closure -->
        <param name="Icp/PM"                    type="string" value="false"/>
        <param name="Icp/PointToPlane"          type="string" value="false"/>
        <param name="Icp/MaxCorrespondenceDistance"  type="string" value="0.15"/>
        <param name="Icp/VoxelSize"             type="string" value="0.1"/>


        <param name="Grid/Sensor" type="int" value="1"/>
        <param name="Grid/FromDepth"            type="string" value="true"/> 
        <param name="Grid/3D"                  type="string" value="true"/>
        <param name="Grid/MaxGroundAngle"            type="string" value="45"/>
        <param name="RGBD/DepthMax"          type="string" value="3"/> 

        <param name="gen_dept" value=""/>
        
        <param name="ORB/Gpu" value="true"/>
        
   </node>

  </group>

  <!-- Visualisation RVIZ -->
  <node pkg="rviz" type="rviz" name="rviz" args="-d $(find rtabmap_demos)/launch/config/demo_robot_mapping.rviz" output="screen"/>
   <node pkg="nodelet" type="nodelet" name="points_xyzrgb" args="standalone rtabmap_util/point_cloud_xyzrgb">
    <remap from="rgb/image"       to="/camera/image_raw"/>
  	<remap from="depth/image"     to="/camera/depth_image"/>
  	<remap from="rgb/camera_info" to="/camera/camera_info"/>
    <remap from="cloud"           to="voxel_cloud" />

    <param name="queue_size" type="int" value="10"/>
    <param name="voxel_size" type="double" value="0.1"/>
  </node>


    <!-- Static transform từ imu đến image -->
    <node pkg="tf" type="static_transform_publisher" name="imu_to_image" args="0.02172388268966517 -6.605455433829172e-05 -0.00048817563004522853 1.5708 3.1416 1.5708 imu image 100"/>
    
    <node name="transform_point_cloud" pkg="master" type="transform_point_cloud.py" output="screen"/>

</launch>